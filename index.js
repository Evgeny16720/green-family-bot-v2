const express = require('express');
const app = express();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '8406574277:AAFwnvVsTRl7sNx2pTqDr7I4O-aVPf-pHnw';
const OPENAI_API_KEY = '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';

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  console.log('‚úÖ Homepage requested');
  
  res.json({
    status: 'üåø Green Family Bot v2.0',
    description: 'Telegram bot is running successfully',
    timestamp: new Date().toISOString(),
    endpoints: {
      webhook: '/webhook',
      health: '/health'
    }
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// Webhook endpoint
app.post('/webhook', async (req, res) => {
  const startTime = Date.now();
  
  try {
    console.log('üî• === WEBHOOK RECEIVED ===');
    console.log('Time:', new Date().toISOString());
    console.log('Body size:', JSON.stringify(req.body).length, 'bytes');
    console.log('Headers:', JSON.stringify(req.headers, null, 2));
    console.log('Body:', JSON.stringify(req.body, null, 2));
    
    const { message, edited_message } = req.body;
    const msg = message || edited_message;
    
    if (!msg) {
      console.log('‚ùå No message found in webhook');
      return res.status(200).json({ status: 'ok', message: 'no_message' });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    const text = msg.text || '';
    const from = msg.from || {};
    const username = from.username || from.first_name || 'Unknown';
    const userId = from.id;
    
    console.log('üì® Message details:');
    console.log('  Chat ID:', chatId);
    console.log('  Chat Type:', chatType);
    console.log('  User:', username, `(${userId})`);
    console.log('  Text:', `"${text}"`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç
    let responseText = '';
    
    if (text === '/start') {
      responseText = `üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Green Family Bot v2.0!

üëã –ü—Ä–∏–≤–µ—Ç, ${username}!

ü§ñ –Ø –Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç Green Family
‚ú® –†–∞–±–æ—Ç–∞—é –Ω–∞ Vercel + Node.js
üîß –í–µ—Ä—Å–∏—è 2.0 - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è

–ö–æ–º–∞–Ω–¥—ã:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã

üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!`;

    } else if (text === '/help') {
      responseText = `ü§ñ Green Family Bot - –ö–æ–º–∞–Ω–¥—ã:

üöÄ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
üìä /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
üèì /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
üåø /about - –æ –∫–æ–º–ø–∞–Ω–∏–∏ Green Family

üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ AI
‚Ä¢ –†–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –õ–æ–≥–∏—Ä—É—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Google Sheets`;

    } else if (text === '/info') {
      responseText = `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:

üÜî Chat ID: ${chatId}
üë§ –í–∞—à ID: ${userId}
üìù –ò–º—è: ${username}
üí¨ –¢–∏–ø —á–∞—Ç–∞: ${chatType}
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

ü§ñ –ë–æ—Ç –≤–µ—Ä—Å–∏—è: 2.0
‚ö° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Vercel
üåê –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω`;

    } else if (text === '/ping') {
      responseText = `üèì –ü–æ–Ω–≥!

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ
‚ö° –û—Ç–≤–µ—Ç –∑–∞ ${Date.now() - startTime}–º—Å
üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toLocaleTimeString('ru-RU')}
üåç –°–µ—Ä–≤–µ—Ä: Vercel (–°–®–ê)
üîÑ Uptime: ${Math.floor(process.uptime())} —Å–µ–∫—É–Ω–¥`;

    } else if (text === '/about') {
      responseText = `üåø Green Family - —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

üíö –û –∫–æ–º–ø–∞–Ω–∏–∏:
‚Ä¢ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–æ–º–∞
‚Ä¢ –ó–∞–±–æ—Ç–∞ –æ–± –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–µ–º
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–π —Å–µ–º—å–∏ - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –∑–∞—è–≤–∫–∏`;

    } else if (text && text.length > 0) {
      // AI –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      console.log('üß† Sending to AI...');
      responseText = await getAIResponse(text, username, chatType);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if (responseText) {
      console.log('üì§ Sending response:', responseText.slice(0, 100) + '...');
      
      const sendResult = await sendTelegramMessage(chatId, responseText);
      
      if (sendResult.success) {
        console.log('‚úÖ Response sent successfully');
      } else {
        console.log('‚ùå Failed to send response:', sendResult.error);
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      logToGoogleSheets(username, chatId, text, responseText).catch(err => {
        console.log('‚ö†Ô∏è  Logging error (non-critical):', err.message);
      });
    }
    
    const processingTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è  Total processing time: ${processingTime}ms`);
    console.log('üèÅ === WEBHOOK PROCESSED ===\n');
    
    return res.status(200).json({ 
      status: 'success', 
      processing_time: processingTime,
      response_sent: !!responseText 
    });
    
  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error('üí• WEBHOOK ERROR:', error);
    console.error('Stack:', error.stack);
    console.log(`‚ùå Error processing time: ${processingTime}ms`);
    
    return res.status(200).json({ 
      status: 'error', 
      error: error.message,
      processing_time: processingTime
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, text) {
  try {
    const fetch = (await import('node-fetch')).default;
    
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      disable_web_page_preview: true
    };
    
    console.log('üì° Telegram API call:', url);
    
    const response = await fetch(url, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'GreenFamilyBot/2.0'
      },
      body: JSON.stringify(payload),
      timeout: 30000
    });
    
    const responseText = await response.text();
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${responseText}`);
    }
    
    const data = JSON.parse(responseText);
    
    if (!data.ok) {
      throw new Error(`Telegram Error: ${data.description}`);
    }
    
    return { success: true, data };
    
  } catch (error) {
    console.error('‚ùå Telegram send error:', error);
    return { success: false, error: error.message };
  }
}

// AI –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
async function getAIResponse(question, username, chatType) {
  try {
    const fetch = (await import('node-fetch')).default;
    
    const systemPrompt = `–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Green Family, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–æ–º–∞.

–ö–û–ù–¢–ï–ö–°–¢:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}
- –¢–∏–ø —á–∞—Ç–∞: ${chatType}
- –ö–æ–º–ø–∞–Ω–∏—è: Green Family (—ç–∫–æ-–ø—Ä–æ–¥—É–∫—Ç—ã)

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–¥–æ 200 —Å–ª–æ–≤)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
- –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ - —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ Green Family
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: question }
        ],
        temperature: 0.7,
        max_tokens: 500,
        presence_penalty: 0.1
      }),
      timeout: 30000
    });
    
    if (!response.ok) {
      throw new Error(`OpenAI HTTP ${response.status}`);
    }
    
    const data = await response.json();
    const aiText = data.choices[0]?.message?.content?.trim();
    
    if (!aiText) {
      throw new Error('Empty AI response');
    }
    
    return aiText;
    
  } catch (error) {
    console.error('‚ùå AI error:', error);
    
    if (error.message.includes('429')) {
      return '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
    } else if (error.message.includes('401')) {
      return 'üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else {
      return `ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.

–ù–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/about - –æ Green Family
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`;
    }
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function logToGoogleSheets(username, chatId, message, response) {
  try {
    // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Sheets
    console.log('üìù Log entry:', { username, chatId, message: message.slice(0, 50), response: response.slice(0, 50) });
    return true;
  } catch (error) {
    console.error('üìù Logging error:', error);
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection:', reason);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üîÑ SIGTERM received, shutting down gracefully');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log('üöÄ === GREEN FAMILY BOT v2.0 STARTED ===');
  console.log(`üì° Server running on port ${PORT}`);
  console.log(`üïê Started at: ${new Date().toISOString()}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó Webhook endpoint: /webhook`);
  console.log('‚úÖ Ready to receive Telegram webhooks!');
});

// Export –¥–ª—è Vercel
module.exports = app;
